name: ci

on:
  pull_request:
  push:
    branches:
      - main

env:
  PREFIX: TEST_POSTGRES_USERNAME=runner TEST_POSTGRES_PASSWORD=runner

jobs:
  pre_job:
    # skip duplicate checks
    # https://github.com/marketplace/actions/skip-duplicate-actions
    runs-on: ubuntu-20.04
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          cancel_others: true
          concurrent_skipping: same_content_newer
          paths_ignore: '["**/README.md", "**/docs/**"]'

  ci: # don't change this name, else will also need to change branch rules
    if: always()
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        project:
          - repo-api
          - repo-base
          - repo-degree
          - repo-graph
          - repo-module
          - repo-user
          - utils
          - docs
          - server
    steps:
      - uses: actions/checkout@v3
      - uses: bahmutov/npm-install@v1.6.0
        continue-on-error: true
      - run: yarn install --frozen-lockfile --silent
        continue-on-error: true

      - name: Start PostgreSQL
        run: ./.github/scripts/postgres.sh

      - name: üì¶ Run tests for ${{ matrix.project }}
        id: yarn_test
        run: ${{ env.PREFIX }} yarn nx test ${{ matrix.project }} --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3

  build: # don't change this name, else will also need to change branch rules
    if: always()
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'
      - run: yarn --frozen-lockfile

      - name: üì¶ Build entire workspace
        run: yarn build

  results:
    needs: [ci, build]
    if: ${{ always() }}
    runs-on: ubuntu-20.04
    outputs:
      tests: ${{ steps.main.outputs.tests }}
      build: ${{ steps.main.outputs.build }}
      sha: ${{ steps.sha.outputs.sha }}
    steps:
      - name: Log inputs
        run: echo '${{ toJSON(needs) }}'

      - name: Get commit SHA
        id: sha
        run: echo "::set-output name=sha::${GITHUB_SHA::7}"

      - name: Get status emojis
        id: main
        run: |
          function emojize() {
            [ "$2" = "success" ] && emoji="‚úÖ" || emoji="‚ùå"
            echo "::set-output name=${1}::${emoji}"
          }
          emojize tests ${{ needs.ci.result }}
          emojize build ${{ needs.build.result }}

  telegram:
    needs: [pre_job, results]
    if: ${{ always() && needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: ubuntu-20.04
    steps:
      - name: Log inputs
        run: echo '${{ toJSON(needs) }}'
      - name: Send message
        uses: appleboy/telegram-action@master
        with:
          disable_web_page_preview: true
          to: ${{ secrets.TELEGRAM_GROUP }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |
            `${{ needs.results.outputs.sha }}` #${{ github.event.pull_request.number }} ${{ github.event.pull_request.title }}
            ${{ needs.results.outputs.build }} yarn build
            ${{ needs.results.outputs.tests }} yarn test
