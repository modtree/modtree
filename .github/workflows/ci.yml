name: ci

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
      - main

env:
  PREFIX: TEST_DATABASE_TYPE=POSTGRES TEST_POSTGRES_USERNAME=runner TEST_POSTGRES_PASSWORD=runner TEST_POSTGRES_HOST=localhost TEST_POSTGRES_ACTIVE_DATABASE=base TEST_POSTGRES_RESTORE_SOURCE=postgres-modules-only.sql TEST_POSTGRES_SYNC=true
  POSTGRES_INIT: sudo systemctl start postgresql.service; echo "CREATE USER runner PASSWORD 'runner';" > /tmp/setup.sql; echo "ALTER ROLE runner WITH CREATEDB;" >> /tmp/setup.sql; echo "ALTER ROLE runner WITH SUPERUSER;" >> /tmp/setup.sql; sudo su postgres -c "psql --file=/tmp/setup.sql"; createdb base;

jobs:
  pre_job:
    # skip duplicate checks
    # https://github.com/marketplace/actions/skip-duplicate-actions
    runs-on: ubuntu-20.04
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          concurrent_skipping: same_content_newer
          paths_ignore: '["**/README.md", "**/docs/**"]'

  backend_tests:
    if: always()
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: bahmutov/npm-install@v1.6.0
        continue-on-error: true
      - run: yarn install --frozen-lockfile --silent
      - run: ${{ env.POSTGRES_INIT }}
      - name: 📦 Run all backend tests
        working-directory: ./packages/database
        run: ${{ env.PREFIX }} yarn nx ci:test database

  project_build:
    if: always()
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: bahmutov/npm-install@v1.6.0
        continue-on-error: true
      - run: yarn install --frozen-lockfile --silent
      - name: 📦 Build & lint entire project
        run: yarn build

  telegram:
    needs: [pre_job, project_build, backend_tests]
    if: ${{ always() && needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: ubuntu-20.04
    steps:
      - name: Environment prep
        run: |
          function emojize() {
            echo "$1: $2"
            [ "$2" = "success" ] && emoji="✅" || emoji="❌"
            echo "$1=$emoji" >> $GITHUB_ENV
          }
          BASE_URL="https://github.com/modtree/modtree/actions/runs"
          echo "RUN_URL=${BASE_URL}/${{ github.run_id }}" >> $GITHUB_ENV
          echo "SHORT_SHA=`echo ${GITHUB_SHA::7}`" >> $GITHUB_ENV
          emojize PROJECT_BUILD ${{ needs.project_build.result }}
          emojize BACKEND_TESTS ${{ needs.backend_tests.result }}

      - name: Send message (PR)
        if: ${{ github.event_name == 'pull_request' }}
        uses: appleboy/telegram-action@master
        with:
          disable_web_page_preview: true
          to: ${{ secrets.TELEGRAM_GROUP }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |
            `${{ env.SHORT_SHA }}`  #${{ github.event.pull_request.number }}  ${{ github.event.pull_request.title }}
            ${{ env.PROJECT_BUILD }} lint + build
            ${{ env.BACKEND_TESTS }} backend tests
            [view logs](${{ env.RUN_URL }})

      - name: Send message (Push)
        if: ${{ github.event_name == 'push' }}
        uses: appleboy/telegram-action@master
        with:
          disable_web_page_preview: true
          to: ${{ secrets.TELEGRAM_GROUP }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |
            `${{ env.SHORT_SHA }}` ${{ github.event.head_commit.message }}
            ${{ env.PROJECT_BUILD }} lint + build
            ${{ env.BACKEND_TESTS }} backend tests
            [view logs](${{ env.RUN_URL }})
