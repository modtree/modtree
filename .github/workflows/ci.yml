name: ci

on:
  workflow_dispatch:
  pull_request:
    types: [opened, reopened, synchronize]
  push:
    branches:
      - main
      - k
      - w

jobs:
  pre_job:
    # skip duplicate checks
    # https://github.com/marketplace/actions/skip-duplicate-actions
    runs-on: ubuntu-20.04
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          concurrent_skipping: same_content_newer
          paths_ignore: '["**/README.md", "**/docs/**"]'

  ci:
    if: always()
    runs-on: ubuntu-20.04
    outputs:
      project_build: ${{ steps.project_build.outcome }}
      database_core: ${{ steps.database_core.outcome }}
      database_utils: ${{ steps.database_utils.outcome }}
      server_tests: ${{ steps.server_tests.outcome }}
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
    steps:
      # lint then build the entire codebase as a base method
      # to check code quality
      - name: 🍺 Check out repository code
        uses: actions/checkout@v3
      - name: 🧶 Install yarn
        run: yarn install --frozen-lockfile
      - name: 📦 Build & lint database functions
        id: project_build
        continue-on-error: true
        run: yarn ci:build
      # run database tests using a PostgreSQL instance
      # on Github Actions
      - name: 🔥 Initialize PostgreSQL
        run: |
          sudo systemctl start postgresql.service
          echo "CREATE USER runner PASSWORD 'runner';" > /tmp/setup.sql
          echo "ALTER ROLE runner WITH CREATEDB;" >> /tmp/setup.sql
          echo "ALTER ROLE runner WITH SUPERUSER;" >> /tmp/setup.sql
          sudo su postgres -c "psql --file=/tmp/setup.sql"
          createdb base
      - name: 📦 Run database core tests
        id: database_core
        working-directory: ./packages/database
        continue-on-error: true
        run: |
          TEST_DATABASE_TYPE=POSTGRES \
          TEST_POSTGRES_USERNAME=runner \
          TEST_POSTGRES_PASSWORD=runner \
          TEST_POSTGRES_HOST=localhost \
          TEST_POSTGRES_ACTIVE_DATABASE=base \
          TEST_POSTGRES_RESTORE_SOURCE=postgres-modules-only.sql \
          TEST_POSTGRES_SYNC=true \
          yarn ci:test:database
      - name: 📦 Run database utils tests
        id: database_utils
        working-directory: ./packages/database
        continue-on-error: true
        run: |
          TEST_DATABASE_TYPE=POSTGRES \
          TEST_POSTGRES_USERNAME=runner \
          TEST_POSTGRES_PASSWORD=runner \
          TEST_POSTGRES_HOST=localhost \
          TEST_POSTGRES_ACTIVE_DATABASE=base \
          TEST_POSTGRES_RESTORE_SOURCE=postgres-modules-only.sql \
          TEST_POSTGRES_SYNC=true \
          yarn ci:test:utils
      - name: 📦 Run server tests
        id: server_tests
        working-directory: ./packages/database
        continue-on-error: true
        run: |
          TEST_DATABASE_TYPE=POSTGRES \
          TEST_POSTGRES_USERNAME=runner \
          TEST_POSTGRES_PASSWORD=runner \
          TEST_POSTGRES_HOST=localhost \
          TEST_POSTGRES_ACTIVE_DATABASE=base \
          TEST_POSTGRES_RESTORE_SOURCE=postgres-modules-only.sql \
          TEST_POSTGRES_SYNC=true \
          yarn ci:test:server
      - name: Summary
        run: |
          A=${{ steps.project_build.outcome }}
          B=${{ steps.database_core.outcome }}
          C=${{ steps.database_utils.outcome }}
          D=${{ steps.server_tests.outcome }}
          echo "build: $A"
          echo "database core: $B"
          echo "database utils: $C"
          echo "server: $D"
          all=($A $B $C $D)
          [[ "${all[*]}" =~ "failure" ]] && exit 1 || exit 0

  telegram:
    needs: [pre_job, ci]
    if: ${{ always() && needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: ubuntu-20.04
    steps:
      - name: Overall status
        run: |
          echo "logs"
          echo "───────────────────────────────────"
          echo "project build:  ${{ needs.ci.outputs.project_build }}"
          echo "database core tests: ${{ needs.ci.outputs.database_core }}"
          echo "database utils tests: ${{ needs.ci.outputs.database_utils }}"
          echo "server tests:   ${{ needs.ci.outputs.server_tests }}"
          echo "───────────────────────────────────"

      - name: Environment prep
        run: |
          function emojize() {
            [ "$2" = "success" ] && emoji="✅" || emoji="❌"
            echo "$1=$emoji" >> $GITHUB_ENV
          }
          echo "RUN_URL=https://github.com/modtree/modtree/actions/runs/${{ github.run_id }}" >> $GITHUB_ENV; \
          echo "SHORT_SHA=`echo ${GITHUB_SHA::7}`" >> $GITHUB_ENV; \
          emojize PROJECT_BUILD ${{ needs.ci.outputs.project_build }}
          emojize DATABASE_CORE ${{ needs.ci.outputs.database_core }}
          emojize DATABASE_UTILS ${{ needs.ci.outputs.database_utils }}
          emojize SERVER_TESTS ${{ needs.ci.outputs.server_tests }}

      - name: Send message
        uses: appleboy/telegram-action@master
        with:
          disable_web_page_preview: true
          to: ${{ secrets.TELEGRAM_GROUP }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |
            `${{ env.SHORT_SHA }}` ${{ github.event.head_commit.message }}
            ${{ env.PROJECT_BUILD }} lint + build
            ${{ env.DATABASE_CORE }} database core
            ${{ env.DATABASE_UTILS }} database utils
            ${{ env.SERVER_TESTS }} server tests
            [view logs](${{ env.RUN_URL }})
